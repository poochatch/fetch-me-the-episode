[~]:~$ python -i app/db.py
python: can't open file 'app/db.py': [Errno 2] No such file or directory
[~]:~$ ls
admin  bsdpasswrd   dev        download  go1.5.1.linux-amd64.tar.gz  JDK   ~Mail  Muzyka        NetBeansProjects  Publiczny  python_fn.vim  rubyonrails  video           w3m_manual
algs4  dead.letter  Dokumenty  Dysk      hs_err_pid28957.log         Mail  mbox   netbeans-8.1  Obrazy            Pulpit     Release.key    Szablony     VirtualBox VMs
[~]:~$ file download/
download/: directory
[~]:~$ ls download/
0C74E9C8BA4E4572A19979E5AC84AE2587111693.torrent  flash                                                                                  NDIGCZAS013622_1894_002.pdf
457DFDB196FF64141D3F3B4C62A37BEE8FF1CC44.torrent  hplip-3.15.11.run                                                                      Rabelais Francois - Gargantua i Pantagruel.pdf
better0202.torrent                                hplip_3.16.2+repack0-4_amd64.deb                                                       seminarium_albert_misciorak.pdf
bigshort.torrent                                  Huizinga Johan_Jesień średniowiecza.pdf                                                the_knick
cd58.iso                                          huizing jesień średniowiecza rozd_2.pdf                                                torrentz
control.tar.gz                                    ingarden.pdf                                                                           ubuntu-14.04.3-desktop-amd64.iso
cups                                              install58.iso                                                                          vikingss04e02.torrent
data.tar.xz                                       Kania Resortowe dzieci Media.pdf                                                       WinDjView-2.1-Setup.exe
debian-binary                                     [kat.cr]better.call.saul.s02e03.amarillo.1080p.web.dl.dd5.1.hevc.x265.lgc.mkv.torrent
fd11src.iso                                       log
[~]:~$ ls download/t
the_knick/ torrentz/  
[~]:~$ ls download/the_knick/
[kat.cr]the.knick.s01.season.1.complete.hdtv.480p.x264.aac.e.subs.gwc.torrent  The.Knick.S02E06.HDTV.x264-KILLERS[ettv]
Season1                                                                        The.Knick.S02E07.HDTV.x264-KILLERS[ettv]
The.Knick.S02E01.HDTV.x264-KILLERS[ettv]                                       The.Knick.S02E08.INTERNAL.HDTV.x264-KILLERS[ettv]
The.Knick.S02E02.HDTV.x264-KILLERS[ettv]                                       The.Knick.S02E09.PROPER.HDTV.x264-KILLERS[ettv]
The.Knick.S02E03.HDTV.x264-KILLERS[ettv]                                       The.Knick.S02E10.HDTV.x264-KILLERS[ettv]
The.Knick.S02E04.HDTV.x264-KILLERS[ettv]                                       The Knick S01 Season 1 Complete HDTV 480p x264 AAC E-Subs [GWC]
The.Knick.S02E05.HDTV.x264-KILLERS[ettv]
[~]:~$ ls
admin  bsdpasswrd   dev        download  go1.5.1.linux-amd64.tar.gz  JDK   ~Mail  Muzyka        NetBeansProjects  Publiczny  python_fn.vim  rubyonrails  video           w3m_manual
algs4  dead.letter  Dokumenty  Dysk      hs_err_pid28957.log         Mail  mbox   netbeans-8.1  Obrazy            Pulpit     Release.key    Szablony     VirtualBox VMs
[~]:~$ mv download/ Download/
[~]:~$ ls
admin  bsdpasswrd   dev        Download  go1.5.1.linux-amd64.tar.gz  JDK   ~Mail  Muzyka        NetBeansProjects  Publiczny  python_fn.vim  rubyonrails  video           w3m_manual
algs4  dead.letter  Dokumenty  Dysk      hs_err_pid28957.log         Mail  mbox   netbeans-8.1  Obrazy            Pulpit     Release.key    Szablony     VirtualBox VMs
[~]:~$ cd dev/Python/aport/
[~]:~$ python -i app/db.py
>>> a.add_show('The Vikings', '/vikings')
>>> a.get_entry_by_field('The Vikings','title')
<Show(title='The Vikings', url='/vikings'>
>>> b = a.get_entry_by_field('The Vikings','title') 
>>> b.id
1
>>> b.title
u'The Vikings'
>>> b.downloaded_episodes
[]
>>> 
[~]:~$ python -i app/db.py
>>> b = a.get_entry_by_field('The Vikings', 'title')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "app/db.py", line 57, in get_entry_by_field
    raise(ValueError, 'No such entry in database!')
ValueError
>>> a.session.query(Shows).all()
[]
>>> 
[~]:~$ ls
app  __init__.py  __init__.pyc  main.py  notes.py  path_test.py  shows.db  shows.db-journal  test
[~]:~$ python main.py 
/home/wojtek/dev/Python/aport/home/wojtek/dev/Python/aport/torrents/
/home/wojtek/video/
0 Game of Thrones
1 The Big Bang Theory
2 The Walking Dead
3 Arrow
4 Suits
5 The Flash
6 Homeland
7 The Blacklist
8 Marvel's Agents of S.H.I.E.L.D.
9 Modern Family
10 The Vampire Diaries
11 Gotham
12 Sherlock
13 House of Cards (2013)
14 True Detective
15 Orange is the New Black
16 Supernatural
17 Vikings
18 Grey's Anatomy
19 New Girl
20 Under the Dome
21 Once Upon a Time
22 Person of Interest
23 Better Call Saul
24 The 100
25 Castle
26 Elementary
27 The Originals
28 Family Guy
29 Pretty Little Liars
30 Hannibal
31 Falling Skies
32 Grimm
33 How To Get Away With Murder
34 American Horror Story
35 South Park
36 Brooklyn Nine-Nine
37 Bones
38 Scandal
39 Marvel's Agent Carter
40 Daredevil
41 Continuum
42 2 Broke Girls
43 Orphan Black
44 Sleepy Hollow
45 Silicon Valley
46 Criminal Minds
47 The Simpsons
48 Fargo
Please enter show number: 
Traceback (most recent call last):
  File "main.py", line 24, in <module>
    nr = int(raw_input( 'Please enter show number: '))
ValueError: invalid literal for int() with base 10: ''
[~]:~$ 
[~]:~$ cd ..
[~]:~$ python aport/main.py 
/home/wojtek/dev/Python/aport/home/wojtek/dev/Python/aport/torrents/
/home/wojtek/video/
0 Game of Thrones
1 The Big Bang Theory
2 The Walking Dead
3 Arrow
4 Suits
5 The Flash
6 Homeland
7 The Blacklist
8 Marvel's Agents of S.H.I.E.L.D.
9 Modern Family
10 The Vampire Diaries
11 Gotham
12 Sherlock
13 House of Cards (2013)
14 True Detective
15 Orange is the New Black
16 Supernatural
17 Vikings
18 Grey's Anatomy
19 New Girl
20 Under the Dome
21 Once Upon a Time
22 Person of Interest
23 Better Call Saul
24 The 100
25 Castle
26 Elementary
27 The Originals
28 Family Guy
29 Pretty Little Liars
30 Hannibal
31 Falling Skies
32 Grimm
33 How To Get Away With Murder
34 American Horror Story
35 South Park
36 Brooklyn Nine-Nine
37 Bones
38 Scandal
39 Marvel's Agent Carter
40 Daredevil
41 Continuum
42 2 Broke Girls
43 Orphan Black
44 Sleepy Hollow
45 Silicon Valley
46 Criminal Minds
47 The Simpsons
48 Fargo
Please enter show number: 
Traceback (most recent call last):
  File "aport/main.py", line 24, in <module>
    nr = int(raw_input( 'Please enter show number: '))
ValueError: invalid literal for int() with base 10: ''
[~]:~$ pwd
/home/wojtek/dev/Python
[~]:~$ cd aport/
[~]:~$ python app/db.py
Traceback (most recent call last):
  File "app/db.py", line 10, in <module>
    class Shows(Base):
NameError: name 'Base' is not defined
[~]:~$ python app/db.py
[~]:~$ python -i app/db.py
>>> a.query(Shows).all()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'HandleDataBase' object has no attribute 'query'
>>> a.session.query(Shows).all()
[]
>>> a.add_show('The Vikings', '/vikings')
>>> a.session.query(Shows).all()         
[<Show(title='The Vikings', url='/vikings'>]
>>> exit()
[~]:~$ python -i app/db.py
>>> a.session.query(Shows).all()
[]
>>> 
[~]:~$ ls
app  __init__.py  __init__.pyc  main.py  notes.py  path_test.py  shows.db  shows.db-journal  test
[~]:~$ ls app/
aport_conf.py  aport_conf.pyc  db.py  db.pyc  fetchinfo.py  fetchinfo.pyc  fetchtorrent.py  fetchtorrent.pyc  __init__.py  __init__.pyc  shows.db  shows.db-journal  utils.py
[~]:~$ ls *db*
shows.db  shows.db-journal
[~]:~$ rm *db*
[~]:~$ ls app/*.db*
app/shows.db  app/shows.db-journal
[~]:~$ rm app/*.db*
[~]:~$ ls *
__init__.py  __init__.pyc  main.py  notes.py  path_test.py

app:
aport_conf.py  aport_conf.pyc  db.py  db.pyc  fetchinfo.py  fetchinfo.pyc  fetchtorrent.py  fetchtorrent.pyc  __init__.py  __init__.pyc  utils.py

test:
aport_test_suite.py  fetch_info_test.py  __init__.py  __init__.pyc
[~]:~$ python -i app/db.py
>>> a.add_show("The Vikings", '/vikings')
>>> a.session.query(Shows).all()
[<Show(title='The Vikings', url='/vikings'>]
>>> 
[~]:~$ python -i app/db.py
>>> a.session.query(Shows).all()
[]
>>> 
[~]:~$ ;s
bash: błąd składni przy nieoczekiwanym znaczniku `;'
[~]:~$ ;s
bash: błąd składni przy nieoczekiwanym znaczniku `;'
[~]:~$ ls
app  __init__.py  __init__.pyc  main.py  notes.py  path_test.py  test
[~]:~$ ls a
ls: nie ma dostępu do a: Nie ma takiego pliku ani katalogu
[~]:~$ ls 
app  __init__.py  __init__.pyc  main.py  notes.py  path_test.py  test
[~]:~$ ls app/
aport_conf.py  aport_conf.pyc  db.py  db.pyc  fetchinfo.py  fetchinfo.pyc  fetchtorrent.py  fetchtorrent.pyc  __init__.py  __init__.pyc  shows.db  shows.db-journal  utils.py
[~]:~$ python -i app/db.py
Traceback (most recent call last):
  File "app/db.py", line 102, in <module>
    print b[0].title
IndexError: list index out of range
>>> a.add_show('The Vikings','/vikings')
>>> quit()
[~]:~$ python -i app/db.py
Traceback (most recent call last):
  File "app/db.py", line 102, in <module>
    print b[0].title
IndexError: list index out of range
>>> 
[~]:~$ python -i app/db.py
Traceback (most recent call last):
  File "app/db.py", line 104, in <module>
    print b[0].title
IndexError: list index out of range
>>> a.add_show('The Vikings', '/vikings')
>>> a.session.query(Shows).all()
[<Show(title='The Vikings', url='/vikings'>]
>>> a.session.close()
>>> quit()
[~]:~$ python -i app/db.py
Traceback (most recent call last):
  File "app/db.py", line 104, in <module>
    print b[0].title
IndexError: list index out of range
>>> a.sessio.query(Shows).all()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'HandleDataBase' object has no attribute 'sessio'
>>> a.session.query(Shows).all()
[]
>>> quit()
[~]:~$ ls *
__init__.py  __init__.pyc  main.py  notes.py  path_test.py

app:
aport_conf.py  aport_conf.pyc  db.py  db.pyc  fetchinfo.py  fetchinfo.pyc  fetchtorrent.py  fetchtorrent.pyc  __init__.py  __init__.pyc  shows.db  utils.py

test:
aport_test_suite.py  fetch_info_test.py  __init__.py  __init__.pyc
[~]:~$ python -i app/db.py
Traceback (most recent call last):
  File "app/db.py", line 105, in <module>
    print b[0].title
IndexError: list index out of range
>>> a.add_show('The Vikings','/vikings')
>>> a.session.query(Shows).all()
[<Show(title='The Vikings', url='/vikings'>]
>>> a.session.query(Shows).all()[0]
<Show(title='The Vikings', url='/vikings'>
>>> quit()
[~]:~$ python -i app/db.py
Traceback (most recent call last):
  File "app/db.py", line 105, in <module>
    print b[0].title
IndexError: list index out of range
>>> 
[~]:~$ python -i app/db.py
2016-03-24 14:01:30,760 INFO sqlalchemy.engine.base.Engine SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
2016-03-24 14:01:30,760 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:01:30,761 INFO sqlalchemy.engine.base.Engine SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
2016-03-24 14:01:30,761 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:01:30,762 INFO sqlalchemy.engine.base.Engine PRAGMA table_info("shows")
2016-03-24 14:01:30,762 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:01:30,763 INFO sqlalchemy.engine.base.Engine PRAGMA foreign_key_list("shows")
2016-03-24 14:01:30,763 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:01:30,763 INFO sqlalchemy.engine.base.Engine SELECT sql FROM  (SELECT * FROM sqlite_master UNION ALL   SELECT * FROM sqlite_temp_master) WHERE name = 'shows' AND type = 'table'
2016-03-24 14:01:30,764 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:01:30,765 INFO sqlalchemy.engine.base.Engine PRAGMA index_list("shows")
2016-03-24 14:01:30,765 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:01:30,765 INFO sqlalchemy.engine.base.Engine PRAGMA index_list("shows")
2016-03-24 14:01:30,765 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:01:30,765 INFO sqlalchemy.engine.base.Engine SELECT sql FROM  (SELECT * FROM sqlite_master UNION ALL   SELECT * FROM sqlite_temp_master) WHERE name = 'shows' AND type = 'table'
2016-03-24 14:01:30,765 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:01:30,779 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2016-03-24 14:01:30,779 INFO sqlalchemy.engine.base.Engine SELECT shows.id AS shows_id, shows.title AS shows_title, shows.url AS shows_url 
FROM shows
2016-03-24 14:01:30,780 INFO sqlalchemy.engine.base.Engine ()
Traceback (most recent call last):
  File "app/db.py", line 105, in <module>
    print b[0].title
IndexError: list index out of range
>>> a.add_show('The Vikings','/vikings')
2016-03-24 14:03:23,869 INFO sqlalchemy.engine.base.Engine INSERT INTO shows (title, url) VALUES (?, ?)
2016-03-24 14:03:23,869 INFO sqlalchemy.engine.base.Engine ('The Vikings', '/vikings')
2016-03-24 14:03:23,872 INFO sqlalchemy.engine.base.Engine SELECT shows.id AS shows_id, shows.title AS shows_title, shows.url AS shows_url 
FROM shows 
WHERE shows.title = ? AND shows.url = ?
 LIMIT ? OFFSET ?
2016-03-24 14:03:23,872 INFO sqlalchemy.engine.base.Engine ('The Vikings', '/vikings', 1, 0)
>>> 
[~]:~$ python -i app/db.py
2016-03-24 14:04:52,923 INFO sqlalchemy.engine.base.Engine SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
2016-03-24 14:04:52,923 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:04:52,923 INFO sqlalchemy.engine.base.Engine SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
2016-03-24 14:04:52,923 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:04:52,924 INFO sqlalchemy.engine.base.Engine PRAGMA table_info("shows")
2016-03-24 14:04:52,924 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:04:52,926 INFO sqlalchemy.engine.base.Engine PRAGMA foreign_key_list("shows")
2016-03-24 14:04:52,926 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:04:52,926 INFO sqlalchemy.engine.base.Engine SELECT sql FROM  (SELECT * FROM sqlite_master UNION ALL   SELECT * FROM sqlite_temp_master) WHERE name = 'shows' AND type = 'table'
2016-03-24 14:04:52,926 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:04:52,927 INFO sqlalchemy.engine.base.Engine PRAGMA index_list("shows")
2016-03-24 14:04:52,927 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:04:52,928 INFO sqlalchemy.engine.base.Engine PRAGMA index_list("shows")
2016-03-24 14:04:52,928 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:04:52,928 INFO sqlalchemy.engine.base.Engine SELECT sql FROM  (SELECT * FROM sqlite_master UNION ALL   SELECT * FROM sqlite_temp_master) WHERE name = 'shows' AND type = 'table'
2016-03-24 14:04:52,928 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:04:52,940 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2016-03-24 14:04:52,941 INFO sqlalchemy.engine.base.Engine SELECT shows.id AS shows_id, shows.title AS shows_title, shows.url AS shows_url 
FROM shows
2016-03-24 14:04:52,941 INFO sqlalchemy.engine.base.Engine ()
Traceback (most recent call last):
  File "app/db.py", line 106, in <module>
    print b[0].title
IndexError: list index out of range
>>> a.add_show('The Vikings','/vikings')
2016-03-24 14:05:05,700 INFO sqlalchemy.engine.base.Engine INSERT INTO shows (title, url) VALUES (?, ?)
2016-03-24 14:05:05,700 INFO sqlalchemy.engine.base.Engine ('The Vikings', '/vikings')
2016-03-24 14:05:05,703 INFO sqlalchemy.engine.base.Engine SELECT shows.id AS shows_id, shows.title AS shows_title, shows.url AS shows_url 
FROM shows 
WHERE shows.title = ? AND shows.url = ?
 LIMIT ? OFFSET ?
2016-03-24 14:05:05,703 INFO sqlalchemy.engine.base.Engine ('The Vikings', '/vikings', 1, 0)
2016-03-24 14:05:05,704 INFO sqlalchemy.engine.base.Engine COMMIT
>>> 
[~]:~$ python -i app/db.py
2016-03-24 14:05:12,455 INFO sqlalchemy.engine.base.Engine SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
2016-03-24 14:05:12,456 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:05:12,456 INFO sqlalchemy.engine.base.Engine SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
2016-03-24 14:05:12,456 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:05:12,457 INFO sqlalchemy.engine.base.Engine PRAGMA table_info("shows")
2016-03-24 14:05:12,457 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:05:12,458 INFO sqlalchemy.engine.base.Engine PRAGMA foreign_key_list("shows")
2016-03-24 14:05:12,458 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:05:12,459 INFO sqlalchemy.engine.base.Engine SELECT sql FROM  (SELECT * FROM sqlite_master UNION ALL   SELECT * FROM sqlite_temp_master) WHERE name = 'shows' AND type = 'table'
2016-03-24 14:05:12,459 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:05:12,460 INFO sqlalchemy.engine.base.Engine PRAGMA index_list("shows")
2016-03-24 14:05:12,460 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:05:12,460 INFO sqlalchemy.engine.base.Engine PRAGMA index_list("shows")
2016-03-24 14:05:12,460 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:05:12,460 INFO sqlalchemy.engine.base.Engine SELECT sql FROM  (SELECT * FROM sqlite_master UNION ALL   SELECT * FROM sqlite_temp_master) WHERE name = 'shows' AND type = 'table'
2016-03-24 14:05:12,460 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:05:12,473 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2016-03-24 14:05:12,474 INFO sqlalchemy.engine.base.Engine SELECT shows.id AS shows_id, shows.title AS shows_title, shows.url AS shows_url 
FROM shows
2016-03-24 14:05:12,474 INFO sqlalchemy.engine.base.Engine ()
The Vikings
>>> quit()
[~]:~$ python -i app/db.py
2016-03-24 14:14:46,084 INFO sqlalchemy.engine.base.Engine SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
2016-03-24 14:14:46,084 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:14:46,084 INFO sqlalchemy.engine.base.Engine SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
2016-03-24 14:14:46,084 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:14:46,085 INFO sqlalchemy.engine.base.Engine PRAGMA table_info("shows")
2016-03-24 14:14:46,085 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:14:46,086 INFO sqlalchemy.engine.base.Engine PRAGMA foreign_key_list("shows")
2016-03-24 14:14:46,087 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:14:46,087 INFO sqlalchemy.engine.base.Engine SELECT sql FROM  (SELECT * FROM sqlite_master UNION ALL   SELECT * FROM sqlite_temp_master) WHERE name = 'shows' AND type = 'table'
2016-03-24 14:14:46,087 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:14:46,088 INFO sqlalchemy.engine.base.Engine PRAGMA index_list("shows")
2016-03-24 14:14:46,088 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:14:46,088 INFO sqlalchemy.engine.base.Engine PRAGMA index_list("shows")
2016-03-24 14:14:46,088 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:14:46,088 INFO sqlalchemy.engine.base.Engine SELECT sql FROM  (SELECT * FROM sqlite_master UNION ALL   SELECT * FROM sqlite_temp_master) WHERE name = 'shows' AND type = 'table'
2016-03-24 14:14:46,089 INFO sqlalchemy.engine.base.Engine ()
2016-03-24 14:14:46,102 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2016-03-24 14:14:46,103 INFO sqlalchemy.engine.base.Engine SELECT shows.id AS shows_id, shows.title AS shows_title, shows.url AS shows_url 
FROM shows
2016-03-24 14:14:46,103 INFO sqlalchemy.engine.base.Engine ()
The Vikings
>>> a.session.query(Shows).filter(asdasd= "The Vikings").all()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: filter() got an unexpected keyword argument 'asdasd'
>>> a = 'asdfsafd'
>>> a.insert('/',0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'str' object has no attribute 'insert'
>>> a = '/'+a
>>> a
'/asdfsafd'
>>> a = (1,2,)
>>> len(a)
2
>>> 
